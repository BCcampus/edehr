upstream upstream-api {
  server PROXY_PASS_HOST:SERVER_PORT;
}

server {
  server_name DOMAIN;
  listen 443 ssl;

  #Strict-Transport-Security to prevent man in the middle attacks
  # https://bjornjohansen.no/optimizing-https-nginx
  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

  #root /opt/edehr/client/dist/;
  root /usr/share/nginx/html;

  location /api {
    #proxy_cache off;
    #proxy_cache off disables caching inherited from the previous configuration level.
    # https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_bypass
    proxy_cache_bypass $http_upgrade;
    proxy_http_version 1.1;
    proxy_max_temp_file_size 0;
    proxy_pass http://upstream-api;
    proxy_redirect off;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-NginX-Proxy true;
    proxy_set_header X-Real-IP $remote_addr;
  }

  ssl_certificate /etc/letsencrypt/live/DOMAIN/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/DOMAIN/privkey.pem;
  # The folks at Letâ€™s Encrypt maintain best-practice HTTPS configurations for nginx.
  # This will score you a straight A in the SSL Labs test!
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  location / {
    try_files $uri $uri/ /index.html;
  }
}

server {
  listen 80;
  server_name DOMAIN;
  location /.well-known/acme-challenge/ {
      root /var/www/certbot;
  }
  if ($host = DOMAIN) {
    return 301 https://$host$request_uri;
  }
  return 404;
}